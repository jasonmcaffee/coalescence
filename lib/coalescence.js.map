{"version":3,"sources":["../src/coalescence.js"],"names":["require","coalescence","sources","length","result","source","deepMerge","target","Object","entries","key","value","sourcePropertyDescriptorForKeyClone","getOwnPropertyDescriptor","mergedValue","Symbol","iterator","cloneIterable","get","defineProperty","clone","undefined","objectToClone","arrayToClone","map","module","exports"],"mappings":";;;;;;AAAAA,QAAQ,2BAAR,E,CAAqC;;AAErC;;;;;;AAMA,IAAMC,cAAc,SAAdA,WAAc,GAAc;AAAA,sCAAVC,OAAU;AAAVA,eAAU;AAAA;;AAC9B,QAAG,CAACA,OAAD,IAAY,EAAEA,QAAQC,MAAR,GAAiB,CAAnB,CAAf,EAAqC;AAAE;AAAS;AAChD,QAAIC,SAAS,EAAb;;AAF8B;AAAA;AAAA;;AAAA;AAI9B,6BAAoBF,OAApB,8HAA4B;AAAA,gBAAlBG,MAAkB;;AACxBC,sBAAUF,MAAV,EAAkBC,MAAlB;AACH;AAN6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ9B,WAAOD,MAAP;AACH,CATD;;AAWA;;;;;;;AAOA,IAAME,YAAY,SAAZA,SAAY,CAACC,MAAD,EAASF,MAAT,EAAkB;AAChC,QAAG,CAACA,MAAJ,EAAW;AAAE;AAAS,KADU,CACV;AACtBE,aAASA,UAAU,EAAnB;;AAFgC;AAAA;AAAA;;AAAA;AAIhC,8BAA0BC,OAAOC,OAAP,CAAeJ,MAAf,CAA1B,mIAAiD;AAAA;;AAAA;;AAAA,gBAAtCK,GAAsC;AAAA,gBAAjCC,KAAiC;;AAC7C;AACA,gBAAIC,sCAAsCJ,OAAOK,wBAAP,CAAgCR,MAAhC,EAAwCK,GAAxC,CAA1C;AACA,gBAAII,oBAAJ;AACA,2BAAcH,KAAd,yCAAcA,KAAd;AACI,qBAAK,QAAL;AACI,wBAAG,OAAOA,MAAMI,OAAOC,QAAb,CAAP,KAAkC,UAArC,EAAgD;AAC5CF,sCAAcG,cAAcN,KAAd,CAAd;AACH,qBAFD,MAEK;AACDG,sCAAcR,UAAUC,OAAOG,GAAP,CAAV,EAAuBC,KAAvB,CAAd;AACH;AACD;AACJ;AACIG,kCAAcH,KAAd;AACA;AAVR;;AAaA;AACA;AACA,gBAAG,OAAOC,oCAAoCM,GAA3C,KAAoD,WAAvD,EAAmE;AAC/DN,oDAAoCD,KAApC,GAA4CG,WAA5C;AACH;;AAEDN,mBAAOW,cAAP,CAAsBZ,MAAtB,EAA8BG,GAA9B,EAAmCE,mCAAnC;AACH;AA5B+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BhC,WAAOL,MAAP;AACH,CA9BD;;AAgCA,IAAMa,QAAQ,SAARA,KAAQ;AAAA,WAAiBd,UAAUe,SAAV,EAAqBC,aAArB,CAAjB;AAAA,CAAd;;AAEA,IAAML,gBAAgB,SAAhBA,aAAgB,eAAe;AACjC,WAAOM,aAAaC,GAAb,CAAiBJ,KAAjB,CAAP;AACH,CAFD;;AAIAK,OAAOC,OAAP,GAAiBzB,WAAjB","file":"coalescence.js","sourcesContent":["require('core-js/fn/object/entries');//polyfill for Object.entries method\n\n/**\n * Combines sources together into one object which is returned after deep merging has completed.\n * The last source param overrides the previous (i.e. defaults should be passed first)\n * @param sources - rest param for all sources which should be coalesced/merged together.\n * @returns {{}} - an object with all properties from the passed in sources.\n */\nconst coalescence = (...sources)=>{\n    if(!sources || !(sources.length > 0)){ return; }\n    let result = {};\n\n    for(const source of sources){\n        deepMerge(result, source);\n    }\n\n    return result;\n};\n\n/**\n * Iterates over each source property and copies it to the target.\n * If the source property value is an object, each property of the value will be copied to the target property\n * @param target - source properties are copied into this object.\n * @param source - all properties will be copied from this into target. function context for get/set/function will be maintained.\n * @returns {*|{}}\n */\nconst deepMerge = (target, source)=>{\n    if(!source){ return; }//Object.entries throws error if source is undefined\n    target = target || {};\n\n    for(const [key, value] of Object.entries(source)){\n        //get the property descriptor and clone it, so we can modify the value without any side affects.\n        let sourcePropertyDescriptorForKeyClone = Object.getOwnPropertyDescriptor(source, key);\n        let mergedValue;\n        switch(typeof(value)){\n            case 'object':\n                if(typeof value[Symbol.iterator] === 'function'){\n                    mergedValue = cloneIterable(value);\n                }else{\n                    mergedValue = deepMerge(target[key], value);\n                }\n                break;\n            default:\n                mergedValue = value;\n                break;\n        }\n\n        //set the value of the descriptor so that the original value is not passed into Object.defineProperty (if so then it will have the value passed in)\n        //Avoid TypeError: Invalid property.  A property cannot both have accessors and be writable or have a value, #<Object>\n        if(typeof(sourcePropertyDescriptorForKeyClone.get) === \"undefined\"){\n            sourcePropertyDescriptorForKeyClone.value = mergedValue;\n        }\n\n        Object.defineProperty(target, key, sourcePropertyDescriptorForKeyClone);\n    }\n    return target;\n};\n\nconst clone = objectToClone => deepMerge(undefined, objectToClone);\n\nconst cloneIterable = arrayToClone =>{\n    return arrayToClone.map(clone);\n};\n\nmodule.exports = coalescence;"]}